<?php

declare(strict_types=1);


namespace App\UI\Http\Security\Controllers;


use App\Application\Command\User\SynchronizeUserRoles\SynchronizeUserRolesCommand;
use App\Domain\User\User;
use App\Infrastructure\Captcha\CaptchaProvider;
use FOS\OAuthServerBundle\Model\AccessTokenManagerInterface;
use League\Tactician\CommandBus;
use OAuth2\OAuth2;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Security\Core\Security;

final class TokenController extends \FOS\OAuthServerBundle\Controller\TokenController
{
    private $captchaProvider;
    private $security;
    private $accessTokenManager;
    private $commandBus;

    /**
     * TokenController constructor.
     */
    public function __construct(
        OAuth2 $server,
        CaptchaProvider $captchaProvider,
        Security $security,
        AccessTokenManagerInterface $accessTokenManager,
        CommandBus $commandBus
    )
    {
        parent::__construct($server);

        $this->captchaProvider = $captchaProvider;
        $this->security = $security;
        $this->accessTokenManager = $accessTokenManager;
        $this->commandBus = $commandBus;
    }

    /**
     * @Route ("/token", methods={"GET", "POST"})
     * @param Request $request
     */
    public function tokenAction(Request $request)
    {
        $grantType = $request->request->get('grant_type');

        if ($grantType === 'password') {
            $captcha = $request->request->get('captcha', '');
            if (!$this->captchaProvider->isCaptchaSolutionValid($captcha)) {
                return new JsonResponse(
                    [
                        'errors' => true,
                        'payload' => [
                            'captcha' => [
                                'Invalid captcha',
                            ]
                        ]
                    ],
                    JsonResponse::HTTP_BAD_REQUEST
                );
            }
        }

        $result = parent::tokenAction($request); // TODO: Change the autogenerated stub

        if (!$result->isSuccessful()) {
            $errorContent = json_decode($result->getContent(), true);
            $errorKey = $errorContent['error'] ?? 'unknown';
            $errorDescription = $errorContent['error_description'] ?? 'unknown';

            return new JsonResponse(
                [
                    'errors' => true,
                    'payload' => [
                        $errorKey => [
                            $errorDescription,
                        ]
                    ]
                ],
                JsonResponse::HTTP_BAD_REQUEST
            );
        }

        /**
         * User credentials/refresh token are valid, we need to synchronize the subscription status
         */
        $responseContent = json_decode($result->getContent(), true);
        $accessTokenRaw = $responseContent['access_token'];

        $accessToken = $this->accessTokenManager->findTokenByToken($accessTokenRaw);
        /**
         * @var User $currentUser
         */
        $currentUser = $accessToken->getUser();
        if (!$currentUser->getDateVerified()) {
            return new JsonResponse(
                [
                    'errors' => true,
                    'payload' => [
                        'email' => [
                            'Email Address is not verified',
                        ]
                    ]
                ],
                JsonResponse::HTTP_BAD_REQUEST
            );
        }

        $this->commandBus->handle(
            new SynchronizeUserRolesCommand($currentUser->getId())
        );

        return $result;
    }
}
